# generated by gen-config.py DO NOT edit

# isort: skip_file
import typing
from alatty.conf.utils import (
    merge_dicts, positive_float, positive_int, python_string, to_bool, to_cmdline, to_color,
    to_color_or_none, unit_float
)
from alatty.options.utils import (
    action_alias, active_tab_title_template, box_drawing_scale,
    clear_all_mouse_actions, clear_all_shortcuts, clipboard_control,
    config_or_absolute_path, copy_on_select, cursor_text_color,
    deprecated_hide_window_decorations_aliases,
    deprecated_send_text, edge_width, env, hide_window_decorations,
    macos_option_as_alt, macos_titlebar_color, menu_map, modify_font,
    notify_on_cmd_finish, optional_edge_width, parse_map, parse_mouse_map, paste_actions,
    resize_debounce_time, scrollback_lines, scrollback_pager_history_size,
    store_multiple, tab_activity_symbol, tab_bar_edge,
    tab_bar_margin_height, tab_bar_min_tabs, tab_fade, tab_separator,
    tab_title_template, titlebar_color, to_cursor_shape, to_font_size, to_layout_names, to_modifiers,
    url_prefixes, visual_window_select_characters, window_border_width, window_size
)


class Parser:

    def action_alias(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        for k, v in action_alias(val):
            ans["action_alias"][k] = v

    def active_border_color(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['active_border_color'] = to_color_or_none(val)

    def active_tab_background(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['active_tab_background'] = to_color(val)

    def active_tab_foreground(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['active_tab_foreground'] = to_color(val)

    def active_tab_title_template(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['active_tab_title_template'] = active_tab_title_template(val)

    def background(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['background'] = to_color(val)

    def background_blur(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['background_blur'] = int(val)

    def background_opacity(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['background_opacity'] = unit_float(val)

    def background_tint(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['background_tint'] = unit_float(val)

    def background_tint_gaps(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['background_tint_gaps'] = unit_float(val)

    def box_drawing_scale(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['box_drawing_scale'] = box_drawing_scale(val)

    def clear_all_mouse_actions(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        clear_all_mouse_actions(val, ans)

    def clear_all_shortcuts(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        clear_all_shortcuts(val, ans)

    def click_interval(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['click_interval'] = float(val)

    def clipboard_control(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['clipboard_control'] = clipboard_control(val)

    def clipboard_max_size(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['clipboard_max_size'] = positive_float(val)

    def close_on_child_death(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['close_on_child_death'] = to_bool(val)

    def color0(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['color0'] = to_color(val)

    def color1(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['color1'] = to_color(val)

    def color2(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['color2'] = to_color(val)

    def color3(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['color3'] = to_color(val)

    def color4(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['color4'] = to_color(val)

    def color5(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['color5'] = to_color(val)

    def color6(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['color6'] = to_color(val)

    def color7(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['color7'] = to_color(val)

    def color8(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['color8'] = to_color(val)

    def color9(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['color9'] = to_color(val)

    def color10(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['color10'] = to_color(val)

    def color11(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['color11'] = to_color(val)

    def color12(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['color12'] = to_color(val)

    def color13(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['color13'] = to_color(val)

    def color14(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['color14'] = to_color(val)

    def color15(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['color15'] = to_color(val)

    def confirm_os_window_close(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['confirm_os_window_close'] = int(val)

    def copy_on_select(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['copy_on_select'] = copy_on_select(val)

    def cursor(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['cursor'] = to_color_or_none(val)

    def cursor_beam_thickness(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['cursor_beam_thickness'] = positive_float(val)

    def cursor_blink_interval(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['cursor_blink_interval'] = float(val)

    def cursor_shape(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['cursor_shape'] = to_cursor_shape(val)

    def cursor_stop_blinking_after(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['cursor_stop_blinking_after'] = positive_float(val)

    def cursor_text_color(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['cursor_text_color'] = cursor_text_color(val)

    def cursor_underline_thickness(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['cursor_underline_thickness'] = positive_float(val)

    def dim_opacity(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['dim_opacity'] = unit_float(val)

    def draw_minimal_borders(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['draw_minimal_borders'] = to_bool(val)

    def dynamic_background_opacity(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['dynamic_background_opacity'] = to_bool(val)

    def editor(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['editor'] = str(val)

    def enabled_layouts(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['enabled_layouts'] = to_layout_names(val)

    def env(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        for k, v in env(val, ans["env"]):
            ans["env"][k] = v

    def exe_search_path(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        for k, v in store_multiple(val, ans["exe_search_path"]):
            ans["exe_search_path"][k] = v

    def font_family(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['font_family'] = str(val)

    def font_size(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['font_size'] = to_font_size(val)

    def force_ltr(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['force_ltr'] = to_bool(val)

    def foreground(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['foreground'] = to_color(val)

    def forward_stdio(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['forward_stdio'] = to_bool(val)

    def hide_window_decorations(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['hide_window_decorations'] = hide_window_decorations(val)

    def inactive_border_color(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['inactive_border_color'] = to_color(val)

    def inactive_tab_background(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['inactive_tab_background'] = to_color(val)

    def inactive_tab_foreground(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['inactive_tab_foreground'] = to_color(val)

    def inactive_text_alpha(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['inactive_text_alpha'] = unit_float(val)

    def initial_window_height(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['initial_window_height'] = window_size(val)

    def initial_window_width(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['initial_window_width'] = window_size(val)

    def input_delay(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['input_delay'] = positive_int(val)

    def kitten_alias(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        for k, v in action_alias(val):
            ans["kitten_alias"][k] = v

    def alatty_mod(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['alatty_mod'] = to_modifiers(val)

    def linux_display_server(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        val = val.lower()
        if val not in self.choices_for_linux_display_server:
            raise ValueError(f"The value {val} is not a valid choice for linux_display_server")
        ans["linux_display_server"] = val

    choices_for_linux_display_server = frozenset(('auto', 'wayland', 'x11'))

    def macos_colorspace(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        val = val.lower()
        if val not in self.choices_for_macos_colorspace:
            raise ValueError(f"The value {val} is not a valid choice for macos_colorspace")
        ans["macos_colorspace"] = val

    choices_for_macos_colorspace = frozenset(('srgb', 'default', 'displayp3'))

    def macos_hide_from_tasks(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['macos_hide_from_tasks'] = to_bool(val)

    def macos_option_as_alt(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['macos_option_as_alt'] = macos_option_as_alt(val)

    def macos_quit_when_last_window_closed(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['macos_quit_when_last_window_closed'] = to_bool(val)

    def macos_thicken_font(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['macos_thicken_font'] = positive_float(val)

    def macos_titlebar_color(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['macos_titlebar_color'] = macos_titlebar_color(val)

    def macos_traditional_fullscreen(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['macos_traditional_fullscreen'] = to_bool(val)

    def macos_window_resizable(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['macos_window_resizable'] = to_bool(val)

    def menu_map(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        for k, v in menu_map(val, ans["menu_map"]):
            ans["menu_map"][k] = v

    def modify_font(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        for k, v in modify_font(val):
            ans["modify_font"][k] = v

    def mouse_hide_wait(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['mouse_hide_wait'] = float(val)

    def notify_on_cmd_finish(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['notify_on_cmd_finish'] = notify_on_cmd_finish(val)

    def paste_actions(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['paste_actions'] = paste_actions(val)

    def placement_strategy(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        val = val.lower()
        if val not in self.choices_for_placement_strategy:
            raise ValueError(f"The value {val} is not a valid choice for placement_strategy")
        ans["placement_strategy"] = val

    choices_for_placement_strategy = frozenset(('center', 'top-left'))

    def remember_window_size(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['remember_window_size'] = to_bool(val)

    def repaint_delay(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['repaint_delay'] = positive_int(val)

    def resize_debounce_time(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['resize_debounce_time'] = resize_debounce_time(val)

    def resize_in_steps(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['resize_in_steps'] = to_bool(val)

    def scrollback_fill_enlarged_window(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['scrollback_fill_enlarged_window'] = to_bool(val)

    def scrollback_lines(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['scrollback_lines'] = scrollback_lines(val)

    def scrollback_pager(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['scrollback_pager'] = to_cmdline(val)

    def scrollback_pager_history_size(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['scrollback_pager_history_size'] = scrollback_pager_history_size(val)

    def select_by_word_characters(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['select_by_word_characters'] = str(val)

    def select_by_word_characters_forward(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['select_by_word_characters_forward'] = str(val)

    def selection_background(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['selection_background'] = to_color_or_none(val)

    def selection_foreground(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['selection_foreground'] = to_color_or_none(val)

    def shell(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['shell'] = str(val)

    def single_window_margin_width(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['single_window_margin_width'] = optional_edge_width(val)

    def single_window_padding_width(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['single_window_padding_width'] = optional_edge_width(val)

    def startup_session(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['startup_session'] = config_or_absolute_path(val)

    def strip_trailing_spaces(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        val = val.lower()
        if val not in self.choices_for_strip_trailing_spaces:
            raise ValueError(f"The value {val} is not a valid choice for strip_trailing_spaces")
        ans["strip_trailing_spaces"] = val

    choices_for_strip_trailing_spaces = frozenset(('always', 'never', 'smart'))

    def sync_to_monitor(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['sync_to_monitor'] = to_bool(val)

    def tab_activity_symbol(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['tab_activity_symbol'] = tab_activity_symbol(val)

    def tab_bar_align(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        val = val.lower()
        if val not in self.choices_for_tab_bar_align:
            raise ValueError(f"The value {val} is not a valid choice for tab_bar_align")
        ans["tab_bar_align"] = val

    choices_for_tab_bar_align = frozenset(('left', 'center', 'right'))

    def tab_bar_background(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['tab_bar_background'] = to_color_or_none(val)

    def tab_bar_edge(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['tab_bar_edge'] = tab_bar_edge(val)

    def tab_bar_margin_color(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['tab_bar_margin_color'] = to_color_or_none(val)

    def tab_bar_margin_height(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['tab_bar_margin_height'] = tab_bar_margin_height(val)

    def tab_bar_margin_width(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['tab_bar_margin_width'] = positive_float(val)

    def tab_bar_min_tabs(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['tab_bar_min_tabs'] = tab_bar_min_tabs(val)

    def tab_bar_style(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        val = val.lower()
        if val not in self.choices_for_tab_bar_style:
            raise ValueError(f"The value {val} is not a valid choice for tab_bar_style")
        ans["tab_bar_style"] = val

    choices_for_tab_bar_style = frozenset(('fade', 'hidden', 'powerline', 'separator', 'slant', 'custom'))

    def tab_fade(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['tab_fade'] = tab_fade(val)

    def tab_powerline_style(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        val = val.lower()
        if val not in self.choices_for_tab_powerline_style:
            raise ValueError(f"The value {val} is not a valid choice for tab_powerline_style")
        ans["tab_powerline_style"] = val

    choices_for_tab_powerline_style = frozenset(('angled', 'round', 'slanted'))

    def tab_separator(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['tab_separator'] = tab_separator(val)

    def tab_switch_strategy(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        val = val.lower()
        if val not in self.choices_for_tab_switch_strategy:
            raise ValueError(f"The value {val} is not a valid choice for tab_switch_strategy")
        ans["tab_switch_strategy"] = val

    choices_for_tab_switch_strategy = frozenset(('last', 'left', 'previous', 'right'))

    def tab_title_max_length(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['tab_title_max_length'] = positive_int(val)

    def tab_title_template(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['tab_title_template'] = tab_title_template(val)

    def term(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['term'] = str(val)

    def text_composition_strategy(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['text_composition_strategy'] = str(val)

    def text_fg_override_threshold(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['text_fg_override_threshold'] = float(val)

    def touch_scroll_multiplier(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['touch_scroll_multiplier'] = float(val)

    def url_excluded_characters(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['url_excluded_characters'] = python_string(val)

    def url_prefixes(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['url_prefixes'] = url_prefixes(val)

    def visual_window_select_characters(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['visual_window_select_characters'] = visual_window_select_characters(val)

    def watcher(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        for k, v in store_multiple(val, ans["watcher"]):
            ans["watcher"][k] = v

    def wayland_titlebar_color(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['wayland_titlebar_color'] = titlebar_color(val)

    def wheel_scroll_min_lines(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['wheel_scroll_min_lines'] = int(val)

    def wheel_scroll_multiplier(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['wheel_scroll_multiplier'] = float(val)

    def window_border_width(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['window_border_width'] = window_border_width(val)

    def window_logo_path(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['window_logo_path'] = config_or_absolute_path(val)

    def window_margin_width(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['window_margin_width'] = edge_width(val)

    def window_padding_width(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['window_padding_width'] = edge_width(val)

    def window_resize_step_cells(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['window_resize_step_cells'] = positive_int(val)

    def window_resize_step_lines(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        ans['window_resize_step_lines'] = positive_int(val)

    def x11_hide_window_decorations(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        deprecated_hide_window_decorations_aliases('x11_hide_window_decorations', val, ans)

    def macos_hide_titlebar(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        deprecated_hide_window_decorations_aliases('macos_hide_titlebar', val, ans)

    def send_text(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        deprecated_send_text('send_text', val, ans)

    def map(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        for k in parse_map(val):
            ans['map'].append(k)

    def mouse_map(self, val: str, ans: typing.Dict[str, typing.Any]) -> None:
        for k in parse_mouse_map(val):
            ans['mouse_map'].append(k)


def create_result_dict() -> typing.Dict[str, typing.Any]:
    return {
        'action_alias': {},
        'env': {},
        'exe_search_path': {},
        'kitten_alias': {},
        'menu_map': {},
        'modify_font': {},
        'watcher': {},
        'map': [],
        'mouse_map': [],
    }


actions: typing.FrozenSet[str] = frozenset(('map', 'mouse_map'))


def merge_result_dicts(defaults: typing.Dict[str, typing.Any], vals: typing.Dict[str, typing.Any]) -> typing.Dict[str, typing.Any]:
    ans = {}
    for k, v in defaults.items():
        if isinstance(v, dict):
            ans[k] = merge_dicts(v, vals.get(k, {}))
        elif k in actions:
            ans[k] = v + vals.get(k, [])
        else:
            ans[k] = vals.get(k, v)
    return ans


parser = Parser()


def parse_conf_item(key: str, val: str, ans: typing.Dict[str, typing.Any]) -> bool:
    func = getattr(parser, key, None)
    if func is not None:
        func(val, ans)
        return True
    return False
